"use strict";(self.webpackChunkreact_homework_template=self.webpackChunkreact_homework_template||[]).push([[214],{5214:function(e,n,t){t.r(n),t.d(n,{default:function(){return F}});var a,r,i,s,c=t(9434),l=function(e){return e.contacts.items},o=function(e){return e.filter.filter},u=t(9563),d=t(6747),m=t(3874),f=t(8571),h=t(8348),p=t(184),x=function(){var e=(0,c.I0)(),n=(0,c.v9)(l);return(0,p.jsxs)(d.Z,{onSubmit:function(t){t.preventDefault();var a=t.target,r=a.elements.name.value,i=a.elements.number.value;!function(e){var t=e.toLowerCase();return n.some((function(e){return e.name.toLowerCase()===t}))}(r)?e((0,u.uK)({name:r,number:i})):h.Am.warn("This contact is already added!"),a.reset()},component:"form",sx:{display:"flex",justifyContent:"center","& > :not(style)":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[(0,p.jsx)(m.Z,{id:"outlined-basic",label:"Name",name:"name",size:"small",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' \\-][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan",required:!0}),(0,p.jsx)(m.Z,{id:"outlined-basic",label:"Number",name:"number",size:"small",pattern:"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}",title:"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +",required:!0}),(0,p.jsx)(f.Z,{variant:"contained",size:"medium",type:"submit",children:"Add contact"})]})},j=t(168),b=t(6487),v=b.ZP.li(a||(a=(0,j.Z)(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 20px;\n"]))),g=b.ZP.p(r||(r=(0,j.Z)(["\n  width: 100%;\n  margin: 0;\n"]))),y=function(e){var n=e.contact,t=n.id,a=n.name,r=n.number,i=(0,c.I0)();return(0,p.jsx)(p.Fragment,{children:(0,p.jsxs)(v,{children:[(0,p.jsxs)(g,{children:[a,": ",r]}),(0,p.jsx)(f.Z,{variant:"contained",size:"medium",type:"button",onClick:function(){return function(e){i((0,u.GK)(e))}(t)},children:"Delete"})]})})},Z=b.ZP.ul(i||(i=(0,j.Z)(["\n  display: flex;\n  flex-direction: column;\n  /* width: 600px; */\n  gap: 15px;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n"]))),w=function(){var e=(0,c.v9)(l),n=(0,c.v9)(o),t=function(){var t=n.toLowerCase();return e.filter((function(e){return e.name.toLowerCase().includes(t)}))}();return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(Z,{children:t.map((function(e){return(0,p.jsx)(y,{contact:e},e.id)}))})})},C=t(2155),z=function(){var e=(0,c.I0)();return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(m.Z,{onChange:function(n){var t=n.target.value;e((0,C.M)(t))},id:"outlined-basic",type:"text",label:"Find contacts by name",name:"filter",size:"small",required:!0})})},k=t(2791),A=b.ZP.div(s||(s=(0,j.Z)(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 25px;\n"]))),F=function(){var e=(0,c.v9)(l),n=(0,c.I0)();return(0,k.useEffect)((function(){n((0,u.yF)())}),[n]),(0,p.jsxs)(A,{children:[(0,p.jsx)(x,{}),(0,p.jsx)("h2",{children:"Your contacts:"}),e&&(0===e.length?(0,p.jsx)("p",{children:"There are no contacts in the list"}):(0,p.jsxs)(p.Fragment,{children:[(0,p.jsx)(z,{}),(0,p.jsx)(w,{})]}))]})}}}]);
//# sourceMappingURL=214.a355263f.chunk.js.map